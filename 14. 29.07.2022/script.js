// ассоциативные массивы

const a = {
    "a": 5,
    "b": 'Hello',
    'zc': 'World',
    x: 1999,
    'some thing': 45
};

const b = new Map([
    ['key1', 'value1'],
    ['key2', 'value2'],
    ['key3', 'value3']
]);

const c = [{"color": "red"}, {"model": "BMW"}, {"power": 250}]

console.log(a);
delete a.a;
console.log(a.a); // undefined

console.log(a.zc);
console.log(a.x);

let key = 'b';
console.log(a.key) // undefined
console.log(a[key]) // 'Hello'

a.xyz = 777;
a.b = 'John Doe' // перезаписали переменную b

console.log(a.length); // undefined
console.log(a.size); // undefined

let out = '';

const arrlg = [];
for(let key in a) {
    arrlg.push(key);
    out += key + '--' + a[key] + '<br>';
}
console.log(arrlg.length); // 5

console.log(b.size); // для ассоциативных массивов определить длину



for(let key in a) {
    out += key + '--' + a[key] + '<br>';
}
document.querySelector('.out').innerHTML = out;


console.log(b);
console.log(b.get('key1'));
console.log(c);
console.log(c[0].color);
console.log(c[2].power);


// Task 1
// При нажатии b-1 выполняете функцию f1. Функция должна вывести в out-1 значение сохраненное под ключем two из массива a1. Возвратите это значение.
// let a1 = {
// "one" : 15,
// "two" : 16,
// "five" : 20
// };

let getBtn1 = document.querySelector('.b-1');
let dataOut1 = document.querySelector('.out-1');

let a1 = {
    "one" : 15,
    "two" : 16,
    "five" : 20
};

getBtn1.onclick = () => {
    dataOut1.innerHTML = a1.two;
}


// Task 2
// При нажатии b-2 выполняете функцию f2. Функция должна вывести в out-2 значение hi из массива a2. Возвратите это значение.
//     let a2 = {
// "one" : "hello",
// "two" : "mahai",
// "five" : "hi"
// };

let getBtn2 = document.querySelector('.b-2');
let dataOut2 = document.querySelector('.out-2');

let a2 = {
    "one" : "hello",
    "two" : "mahai",
    "five" : "hi"
};

getBtn2.onclick = () => {
    dataOut2.innerHTML = a2.five;
}


// Task 3
// При нажатии b-3 выполняете функцию f3. Функция должна вывести в out-3 значение hi из массива a3. Возвратите это значение. Вывод - через пробел.

let getBtn3 = document.querySelector('.b-3');
let dataOut3 = document.querySelector('.out-3');

let a3 = {
    "one" : "hello",
    "two" : "mahai",
    "five" : "hi"
};

getBtn3.onclick = () => {
    dataOut3.innerHTML = ' ' + a3.five;
}


// Task 4
// Давайте напишем функцию f4, которая будет выводить массив a4 в out-4 при нажатии кнопки b-4. Формат вывода - ключ пробел значение перенос строки +'' <br>'. Функция должна возвращать строку в указанном формате вывода.
// Обратите внимание на пробел перед br!!!!!!!!

let getBtn4 = document.querySelector('.b-4');
let dataOut4 = document.querySelector('.out-4');

let a4 = {
    "one" : "hello",
    "two" : "mahai",
    "five" : "hi"
};

getBtn4.onclick = () => {
    for(let key in a4) {
        dataOut4.innerHTML += key + '--' + a4[key] + ' <br>';
    }
}


// Task 5
// Функция f4 жестко привязана к массиву a4. Это не удобно. Давайте напишем функцию f5, которая принимает массив как параметр и выводит его в формате указанном в функции в указанный блок (как второй параметр).


// Task 6
// Добавьте input .i-61 и i-62. При нажатии b-6 выполняете функцию f6. Функция должна получать из i-61 ключ, а из i-62 значение и добавлять его в массив a6. После этого, с помощью функции f5 выводите массив a6 в out-6.


// Task 7
// Добавьте input .i-7. При нажатии b-7 выполняете функцию f7. Функция должна получать из i-7 ключ. Если такой ключ есть в a7 то выводить 1 в out-7, если нет - 0.


// Task 8
// Добавьте input .i-8. При нажатии b-8 выполняете функцию f8. Функция должна выводить значение в out-8, если ключ введенный в i-8 есть в массиве, если нет - 0.


// Task 9
// Добавьте input .i-9. При нажатии b-9 выполняете функцию f9. Функция должна вывести в out-9 все ключи массива a9, которые содержат значение, равное значению в input.i-9. Вывод через пробел. Если значений - нет то выводить пустую строку.


// Task 10
// Давайте напишем полезную функцию f10, которая проверяет есть ли значение в ассоциативном массиве. Фукнция должна возвращать true если есть, и false если нет. Массив и значение передавать функции в качестве параметров.


// Task 11
// При нажатии b-11 выполняете функцию f11. Функция должна получить ключ из i-11 и удалить запись из массива a11 с таким ключем. После этого вывести массив в out-11. Для вывода используйте функцию f5.


// Task 12
// При нажатии b-12 выполняете функцию f12. Функция должна получить значение из i-12 и удалить запись из массива a12 с таким значением. После этого вывести массив в out-12. Для вывода используйте функцию f5.


// Task 13
// При нажатии b-13 выполняете функцию f13. Функция должна в out-13 выводить сумму значений массива a13 (только числа).


// Task 14
// При нажатии b-14 выполняете функцию f14. Функция должна в out-14 выводить нулевые (по индексу) элементы вложенных массивов в a14. Вывод через пробел.


// Task 15
// При нажатии b-15 выполняете функцию f15. Функция должна в out-15 выводить элементы вложенных массивов в a15. Вывод через пробел.


// Task 16
// При нажатии b-16 выполняете функцию f16. Функция должна в out-16 выводить элементы name вложенных массивов в a16. Вывод через пробел.


// Task 17
// При нажатии b-17 выполняете функцию f17. Функция должна в out-17 выводить элементы name вложенных массивов в a17 для который age > 30. Вывод через пробел.


// Task 18
// При нажатии b-18 выполняете функцию f18. Функция должна в out-18 вывести станции метро из массива a18 той ветки, которую пользователь ввел в i-18. Вывод станций - через пробел. Если ветка не найдена выводите пустую строку.


// Task 19
// При нажатии b-19 выполняете функцию f19. Функция должна в out-19 вывести цвет ветки станции которую пользователь ввел в i-19. Пользователь может вводить текст как с большой, так и с маленькой буквы. Если ветка не найдена - выводите пустую строку.


// Task 20
// При нажатии b-20 выполняете функцию f20. Функция должна в out-20 вывести название станции которые содержат переход на другую ветку. Такие станции маркируются 2. Вывод через пробел.